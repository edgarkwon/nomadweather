{"version":3,"sources":["App.js"],"names":["SCREEN_WIDTH","Dimensions","get","width","icons","Clouds","Clear","Atmosphere","Snow","Rain","Drizzle","Thunderstorm","App","useState","city","setCity","days","setDays","setOk","useEffect","a","async","Location","granted","accuracy","coords","latitude","longitude","useGoogleMaps","location","console","log","district","fetch","response","json","daily","getWeather","style","styles","container","cityName","showsHorizontalScrollIndicator","horizontal","pagingEnabled","contentContainerStyle","weather","length","day","alignItems","color","size","marginTop","map","index","flexDirection","justifyContent","temp","parseFloat","toFixed","name","main","description","tinyText","StyleSheet","create","flex","backgroundColor","fontSize","fontWeight","paddingHorizontal"],"mappings":"2zBAWA,IAAeA,EAAiBC,IAAWC,IAAI,UAAvCC,MAEFC,EAAQ,CACZC,OAAQ,SACRC,MAAO,YACPC,WAAY,eACZC,KAAM,OACNC,KAAM,QACNC,QAAS,OACTC,aAAc,aAED,SAASC,IACtB,MAAwBC,mBAAS,cAAjC,WAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,IAAjC,WAAOG,EAAP,KAAaC,EAAb,KACA,EAAoBJ,oBAAS,GAA7B,WAAWK,GAAX,WAwBA,OAHAC,qBAAU,YApBS,iCAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACSE,OADT,yBACTC,SAENL,GAAM,GAHS,WAAAE,EAAA,MAOPE,IAAiC,CAAEE,SAAU,KAPtC,2BAMfC,OAAUC,EANK,EAMLA,SAAUC,EANL,EAMKA,UANL,YAAAP,EAAA,MAQME,IACrB,CAAEI,WAAUC,aACZ,CAAEC,eAAe,KAVF,eAQXC,EARW,OAYjBC,QAAQC,IAAIF,EAAS,IACrBd,EAAQc,EAAS,GAAGG,UAbH,YAAAZ,EAAA,MAcMa,MAAM,uDAC4BP,EAD7B,QAC6CC,EAD5C,wEAdZ,eAcXO,EAdW,mBAAAd,EAAA,MAiBEc,EAASC,QAjBX,QAiBXA,EAjBW,OAkBjBlB,EAAQkB,EAAKC,OAlBI,6DAqBjBC,KACC,IAED,eAAC,IAAD,CAAMC,MAAOC,EAAOC,UAApB,UACE,cAAC,IAAD,CAAMF,MAAOC,EAAOzB,KAApB,SACE,cAAC,IAAD,CAAMwB,MAAOC,EAAOE,SAApB,SAA+B3B,MAEjC,cAAC,IAAD,CACE4B,gCAAgC,EAChCC,YAAU,EACVC,eAAa,EACbC,sBAAuBN,EAAOO,QAJhC,SAMmB,IAAhB9B,EAAK+B,OACJ,cAAC,IAAD,CAAMT,MAAK,OAAOC,EAAOS,KAAd,IAAmBC,WAAY,WAA1C,SACE,cAAC,IAAD,CACEC,MAAM,QACNC,KAAK,QACLb,MAAO,CAAEc,UAAW,QAIxBpC,EAAKqC,KAAI,SAACL,EAAKM,GAAN,OACP,eAAC,IAAD,CAAkBhB,MAAOC,EAAOS,IAAhC,UACE,eAAC,IAAD,CACEV,MAAO,CACLiB,cAAe,MACfN,WAAY,SACZ9C,MAAO,OACPqD,eAAgB,iBALpB,UAQE,cAAC,IAAD,CAAMlB,MAAOC,EAAOkB,KAApB,SACGC,WAAWV,EAAIS,KAAKT,KAAKW,QAAQ,KAEpC,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,KAAMxD,EAAM4C,EAAIF,QAAQ,GAAGe,MAC3BV,KAAM,GACND,MAAM,eAIZ,cAAC,IAAD,CAAMZ,MAAOC,EAAOuB,YAApB,SAAkCd,EAAIF,QAAQ,GAAGe,OACjD,cAAC,IAAD,CAAMvB,MAAOC,EAAOwB,SAApB,SAA+Bf,EAAIF,QAAQ,GAAGgB,gBArBrCR,WA8BvB,IAAMf,EAASyB,IAAWC,OAAO,CAC/BzB,UAAW,CACT0B,KAAM,EACNC,gBAAiB,UAEnBrD,KAAM,CACJoD,KAAM,IACNV,eAAgB,SAChBP,WAAY,UAEdH,QAAS,GACTL,SAAU,CACR2B,SAAU,GACVC,WAAY,MACZnB,MAAO,SAETF,IAAK,CACHC,WAAY,aACZ9C,MAAOH,EACPsE,kBAAmB,IAErBb,KAAM,CAAEW,SAAU,IAAKhB,UAAW,GAAIF,MAAO,SAC7CY,YAAa,CACXM,SAAU,GACVhB,WAAY,GACZF,MAAO,QACPmB,WAAY,OAEdN,SAAU,CAAEK,SAAU,GAAIlB,MAAO,QAASmB,WAAY,MAAOjB,WAAY,M","file":"static/js/app.4cc4e2bd.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as Location from \"expo-location\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  Dimensions,\n  ActivityIndicator,\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nconst { width: SCREEN_WIDTH } = Dimensions.get(\"window\");\nconst API_KEY = \"2b54dfa6467847a69c7123ecff0cc345\";\nconst icons = {\n  Clouds: \"cloudy\",\n  Clear: \"day-sunny\",\n  Atmosphere: \"cloudy-gusts\",\n  Snow: \"snow\",\n  Rain: \"rains\",\n  Drizzle: \"rain\",\n  Thunderstorm: \"lightning\",\n};\nexport default function App() {\n  const [city, setCity] = useState(\"Loading...\");\n  const [days, setDays] = useState([]);\n  const [ok, setOk] = useState(true);\n  const getWeather = async () => {\n    const { granted } = await Location.requestForegroundPermissionsAsync();\n    if (!granted) {\n      setOk(false);\n    }\n    const {\n      coords: { latitude, longitude },\n    } = await Location.getCurrentPositionAsync({ accuracy: 5 });\n    const location = await Location.reverseGeocodeAsync(\n      { latitude, longitude },\n      { useGoogleMaps: false }\n    );\n    console.log(location[0]);\n    setCity(location[0].district);\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=alerts&appid=${API_KEY}&units=metric`\n    );\n    const json = await response.json();\n    setDays(json.daily);\n  };\n  useEffect(() => {\n    getWeather();\n  }, []);\n  return (\n    <View style={styles.container}>\n      <View style={styles.city}>\n        <Text style={styles.cityName}>{city}</Text>\n      </View>\n      <ScrollView\n        showsHorizontalScrollIndicator={false}\n        horizontal\n        pagingEnabled\n        contentContainerStyle={styles.weather}\n      >\n        {days.length === 0 ? (\n          <View style={{ ...styles.day, alignItems: \"center\" }}>\n            <ActivityIndicator\n              color=\"white\"\n              size=\"large\"\n              style={{ marginTop: 10 }}\n            />\n          </View>\n        ) : (\n          days.map((day, index) => (\n            <View key={index} style={styles.day}>\n              <View\n                style={{\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                  width: \"100%\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <Text style={styles.temp}>\n                  {parseFloat(day.temp.day).toFixed(1)}\n                </Text>\n                <Text>\n                  <Fontisto\n                    name={icons[day.weather[0].main]}\n                    size={68}\n                    color=\"white\"\n                  />\n                </Text>\n              </View>\n              <Text style={styles.description}>{day.weather[0].main}</Text>\n              <Text style={styles.tinyText}>{day.weather[0].description}</Text>\n            </View>\n          ))\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"tomato\",\n  },\n  city: {\n    flex: 1.2,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  weather: {},\n  cityName: {\n    fontSize: 68,\n    fontWeight: \"500\",\n    color: \"white\",\n  },\n  day: {\n    alignItems: \"flex-start\",\n    width: SCREEN_WIDTH,\n    paddingHorizontal: 20,\n  },\n  temp: { fontSize: 100, marginTop: 50, color: \"white\" },\n  description: {\n    fontSize: 30,\n    marginTop: -10,\n    color: \"white\",\n    fontWeight: \"500\",\n  },\n  tinyText: { fontSize: 25, color: \"white\", fontWeight: \"500\", marginTop: -5 },\n});\n"],"sourceRoot":""}